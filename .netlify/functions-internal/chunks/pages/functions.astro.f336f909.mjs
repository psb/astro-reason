/* empty css                          */import { c as createAstro, a as createComponent, r as renderTemplate, f as renderComponent } from '../astro.3bf5c58e.mjs';
import 'html-escaper';
import { _ as _1, f as field, s as string, $ as $$int, a as $$Layout } from './dogs.astro.15eef935.mjs';
import * as React from 'react';
import 'cookie';
import 'kleur/colors';
import '@astrojs/internal-helpers/path';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

// Generated by Melange


function decodeFetchResult(json) {
  return {
          joke: field("joke", string, json),
          status: field("status", $$int, json),
          count: field("count", $$int, json)
        };
}

function Lambda(Props) {
  var match = React.useReducer((function (state, action) {
          if (action) {
            return {
                    data: action._0,
                    loading: false
                  };
          } else {
            return {
                    data: state.data,
                    loading: true
                  };
          }
        }), {
        data: {
          joke: "My dog used to chase people on a bike a lot. It got so bad I had to take his bike away.",
          status: 200,
          count: 0
        },
        loading: false
      });
  var dispatch = match[1];
  var state = match[0];
  var loadingImage = function (param) {
    return React.createElement("img", {
                alt: "laugh",
                src: "/laugh.svg"
              });
  };
  var errorImage = function (param) {
    return React.createElement("img", {
                className: "mx-auto",
                alt: "error dog",
                src: "/500.jpg"
              });
  };
  var joke = function (text) {
    return React.createElement("p", {
                className: "p-6 mb-2 rounded-lg text-lg bg-yellow-400"
              }, text);
  };
  var buttons = function (currentCount) {
    return React.createElement("div", {
                className: "flex justify-around"
              }, React.createElement("a", {
                    className: "rounded-md p-4 mt-2 bg-slate-400 text-white hover:bg-slate-500",
                    href: "/"
                  }, "Home"), React.createElement("button", {
                    className: "rounded-md p-4 mt-2 bg-blue-500 text-white hover:bg-blue-600",
                    onClick: (function (param) {
                        _1(dispatch, /* Loading */0);
                        var callback = function (data) {
                          _1(dispatch, /* Loaded */{
                                _0: data
                              });
                        };
                        fetch("https://dog.ceo/api/breeds/image/random").then(function (prim) {
                                  return prim.json();
                                }).then(function (json) {
                                var data = decodeFetchResult(json);
                                _1(callback, data);
                                return Promise.resolve(undefined);
                              }).catch(function (err) {
                              var data = {
                                joke: "",
                                status: 0,
                                count: currentCount
                              };
                              console.log("Error", err);
                              _1(callback, data);
                              return Promise.resolve(undefined);
                            });
                      })
                  }, "Get another joke"));
  };
  return React.createElement("div", {
              className: "container mx-auto max-w-md text-center p-4"
            }, state.loading ? loadingImage() : React.createElement(React.Fragment, undefined, state.data.status !== 200 ? errorImage() : joke(state.data.joke), buttons(state.data.count)));
}

var make = Lambda;
/* react Not a pure module */

const $$Astro = createAstro();
const $$Functions = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Functions;
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Lambda functions" }, { "default": ($$result2) => renderTemplate`
  ${renderComponent($$result2, "Lambda", make, { "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/paulbacchus/Work/astro-reason/src/reason_react_output/src/components/Lambda.js", "client:component-export": "make" })}
` })}`;
}, "/Users/paulbacchus/Work/astro-reason/src/pages/functions.astro");

const $$file = "/Users/paulbacchus/Work/astro-reason/src/pages/functions.astro";
const $$url = "/functions";

export { $$Functions as default, $$file as file, $$url as url };

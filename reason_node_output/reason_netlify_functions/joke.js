// Generated by Melange
'use strict';

var Json = require("../node_modules/@glennsl/bs-json/src/Json.js");
var Caml_option = require("melange.runtime/caml_option.js");
var Json_decode = require("../node_modules/@glennsl/bs-json/src/Json_decode.js");

((require('isomorphic-fetch')));

function decodePostBody(json_string) {
  var jc = Json.parse(json_string);
  if (jc !== undefined) {
    return {
            count: Json_decode.field("count", Json_decode.$$int, Caml_option.valFromOption(jc))
          };
  } else {
    return {
            count: 0
          };
  }
}

function decodeFetchResult(json) {
  return {
          joke: Json_decode.field("joke", Json_decode.string, json),
          id: Json_decode.field("id", Json_decode.string, json),
          status: Json_decode.field("status", Json_decode.$$int, json)
        };
}

function fetchJoke(param) {
  return fetch("https://icanhazdadjoke.com/").then(function (prim) {
                  return prim.json();
                }).then(function (json) {
                return Promise.resolve({
                            TAG: /* Ok */0,
                            _0: json
                          });
              }).catch(function (err) {
              return Promise.resolve({
                          TAG: /* Error */1,
                          _0: err
                        });
            });
}

function handler($$event, _context, callback) {
  console.log("Event", $$event);
  var jokeCount = decodePostBody($$event.body);
  fetchJoke(undefined).then(function (res) {
        if (res.TAG === /* Ok */0) {
          var json = decodeFetchResult(res._0);
          var body = JSON.stringify({
                joke: json.joke,
                count: jokeCount.count + 1 | 0,
                status: json.status
              });
          callback(undefined, {
                statusCode: json.status,
                body: body
              }, undefined);
        } else {
          var body$1 = JSON.stringify({
                joke: res._0,
                count: jokeCount.count,
                status: 500
              });
          callback(undefined, {
                statusCode: 500,
                body: body$1
              }, undefined);
        }
        return Promise.resolve(undefined);
      });
}

exports.decodePostBody = decodePostBody;
exports.decodeFetchResult = decodeFetchResult;
exports.fetchJoke = fetchJoke;
exports.handler = handler;
/*  Not a pure module */

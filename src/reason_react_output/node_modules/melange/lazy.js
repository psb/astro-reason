// Generated by Melange

import * as Curry from "melange.runtime/curry.js";
import * as CamlinternalLazy from "./camlinternalLazy.js";

function from_fun(f) {
  return {
          LAZY_DONE: false,
          VAL: (function () {
              return Curry._1(f, undefined);
            })
        };
}

function from_val(v) {
  return {
          LAZY_DONE: true,
          VAL: v
        };
}

function map(f, x) {
  return {
          LAZY_DONE: false,
          VAL: (function () {
              return Curry._1(f, CamlinternalLazy.force(x));
            })
        };
}

function map_val(f, x) {
  if (CamlinternalLazy.is_val(x)) {
    return {
            LAZY_DONE: true,
            VAL: Curry._1(f, CamlinternalLazy.force(x))
          };
  } else {
    return {
            LAZY_DONE: false,
            VAL: (function () {
                return Curry._1(f, CamlinternalLazy.force(x));
              })
          };
  }
}

var Undefined = CamlinternalLazy.Undefined;

var is_val = CamlinternalLazy.is_val;

var force_val = CamlinternalLazy.force_val;

var lazy_from_fun = from_fun;

var lazy_from_val = from_val;

var lazy_is_val = CamlinternalLazy.is_val;

export {
  Undefined ,
  map ,
  is_val ,
  from_val ,
  map_val ,
  from_fun ,
  force_val ,
  lazy_from_fun ,
  lazy_from_val ,
  lazy_is_val ,
}
/* No side effect */
